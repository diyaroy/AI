import matplotlib.pyplot as plt
import seaborn as sns
import keras
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout
from keras.preproccessing.image import ImageDataGenerator
from keras.optimizers import Adam
from sklearn.metrics import classification_report, confusion_matrix
import tensorflow as tf
import cv2
import os
import numpy as np

labels = ['mask', 'no mask']
img_size = 224
def get_data(data_dir):
  data = []
  for label in labels:
    path = os.path.join(data_dir, label)
    class_num = labels.index(label)
    for img in os.listdir(path):
      try:
        img_arr = cv2.imread(os.path.join(path, img))[..., :: -1)
        resized_arr = cv2.resize(img_arr, (img_size, img_size))
        data.append([resized_arr, class_num])
      except Exception as e:
        print(e)
  return np.array(data)
train = get_data('../input/traintestmask/Main/train')
val = get_data('../input/traintestmask/Main/test')

a = []
for i in train:
  if(i[1] == 0):
    a.append("mask")
  else
    a.append("no mask")
sns.set_style('darkgrid')
sns.countplot(a)
plt.figure(figsize = (5,5))
plt.imshow(train[1][0])
plt.title(labels[train[0][1]])

x_train = []
y_train = []
x_val = []
y_val = []
for feature, label in train:
  x_train.append(feature)
  y_train.append(label)
for feature, label in val:
  x_val.append(feature)
  y_val.append(label)
x_train = np.array(x_train)/255
x_val = np.array(x_val)/255
x_train.reshape(-1, img_size, img_size, 1)
y_train = np.array(y_train)
x_val.reshape(-1, img_size, img_size, 1)
y_val = np.array(y_val)

datagen = ImageDataGenerator(
          feauturewise_center = False,
          samplewise_center = False,
          featurewise_std_normalization = False,
          samplewise_std_normalization = False,
          zca_whitening = False,
          rotation_range = 30,
          zoom_range = 0.2,
          width_shift_range = 0.1,
          height_shift_range = 0.1,
          horizontal_flip = True,
          vertical_flip = False)
datagen.fit(x_train)

model = Sequential()
model.add(Conv2D(32,3,padding="same", actvation = "relu", input_shape= (224,224,3)))
model.add(MaxPool2D())
model.add(Conv2D(32,3,padding="same", activation = "relu"))
model.add(MaxPool2D())
model.add(Conv2D(64,3,padding="same", actication = "relu"))
model.add(MaxPool2D())
model.add(Dropout(0.4))
model.add(Flatten())
model.add(Dense(128, activation = "relu"))
model.add(Dense(2, activation = "softmax"))
model.summary()

opt = Adam(lr=0.000001)
model.compile(optimizer = opt, loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics = ['accuracy'])
history = model.fit(x_train, y_train, epochs = 500, validation_data = (x_val, y_val))

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs_range = range(500)
plt.figure(figsize=(15,15))
plt.subplot(2,2,1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')
plt.subplot(2,2,2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

predictions = model.predict_classes(x_val)
predictions = predictions.reshape(1,-1)[0]
print(classification_report(y_val, predictions, target_names=['Mask(Class 0)', 'No Mask(Class 1)']))
